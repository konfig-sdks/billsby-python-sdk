# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from billsby_python_sdk.pydantic.product_update_plan_and_cycle_request_cycles import ProductUpdatePlanAndCycleRequestCycles

class ProductUpdatePlanAndCycleRequest(BaseModel):
    # The description of the plan
    description: typing.Optional[str] = Field(None, alias='description')

    # The name of the plan you want to update
    name: typing.Optional[str] = Field(None, alias='name')

    # The display name of the plan you want to update
    display_name: typing.Optional[str] = Field(None, alias='displayName')

    # The feature tags associated with the plan
    feature_tags: typing.Optional[str] = Field(None, alias='featureTags')

    # The visibility of the plan
    visibility: typing.Optional[int] = Field(None, alias='visibility')

    cycles: typing.Optional[ProductUpdatePlanAndCycleRequestCycles] = Field(None, alias='cycles')

    # The URL you want your customer to redirected to when they have completed the checkout flow
    redirect_url: typing.Optional[str] = Field(None, alias='redirectUrl')

    # Set up an email to receive alerts when a customer signs up for the plan
    alert_email: typing.Optional[str] = Field(None, alias='alertEmail')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
