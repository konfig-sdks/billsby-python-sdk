# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from billsby_python_sdk.pydantic.product_update_product_request_ordered_custom_fields import ProductUpdateProductRequestOrderedCustomFields
from billsby_python_sdk.pydantic.product_update_product_request_product_country_limitations import ProductUpdateProductRequestProductCountryLimitations

class ProductUpdateProductRequest(BaseModel):
    # The name of the product you want to update
    name: typing.Optional[str] = Field(None, alias='name')

    # The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public=0, Hidden=1, Internal=2, OffSale=3)
    visibility: typing.Optional[int] = Field(None, alias='visibility')

    # The currency you want to the product to be billed in. This must be an ISO3 currency code with maximum three characters. For example: GBP, USD, etc
    billing_currency: typing.Optional[str] = Field(None, alias='billingCurrency')

    # The display name of the product you want to create
    display_name: typing.Optional[str] = Field(None, alias='displayName')

    # A short description of the product
    decription: typing.Optional[str] = Field(None, alias='decription')

    # Do you need to collect a shipping address from your customers for this product; true or false
    is_shipping_address_required: typing.Optional[bool] = Field(None, alias='isShippingAddressRequired')

    # Do you want to validate the shipping address using our tool; true or false
    is_shipping_address_validation_required: typing.Optional[bool] = Field(None, alias='isShippingAddressValidationRequired')

    # Do you want to validate the billing address using our tool; true or false
    is_billing_address_validation_required: typing.Optional[bool] = Field(None, alias='isBillingAddressValidationRequired')

    # Do you want to collect an additional email address from your customers at checkout; true or false
    is_additional_email_required: typing.Optional[bool] = Field(None, alias='isAdditionalEmailRequired')

    # Do you need to collect a phone number from your customers at checkout; true or flase
    is_phone_number_required: typing.Optional[bool] = Field(None, alias='isPhoneNumberRequired')

    # Do you need to get marketing consent from your customers at checkout; true or false
    is _marketing_consent_required_: typing.Optional[bool] = Field(None, alias='is MarketingConsentRequired')

    # Set an email to be alerted when a customer signs up for this product
    alert_email: typing.Optional[str] = Field(None, alias='alertEmail')

    ordered_custom_fields: typing.Optional[ProductUpdateProductRequestOrderedCustomFields] = Field(None, alias='orderedCustomFields')

    # The type of product you want to create; 1 is tiered
    type_of_product: typing.Optional[int] = Field(None, alias='typeOfProduct')

    product_country_limitations: typing.Optional[ProductUpdateProductRequestProductCountryLimitations] = Field(None, alias='productCountryLimitations')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
