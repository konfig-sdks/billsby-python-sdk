# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import datetime, date
import typing
from enum import Enum
from typing_extensions import TypedDict, Literal, TYPE_CHECKING
from pydantic import BaseModel, Field, RootModel, ConfigDict

from billsby_python_sdk.pydantic.product_create_cycle_request_cycles_input_model_item_tiers import ProductCreateCycleRequestCyclesInputModelItemTiers

class ProductCreateCycleRequestCyclesInputModelItem(BaseModel):
    # A number with the update frequency (for example: 5 to renew every five of frequencyType)
    frequency: int = Field(alias='frequency')

    # Daily = 1, Weekly = 2, Monthly = 3, Yearly = 4
    frequency_type: int = Field(alias='frequencyType')

    # The price amount of this cycle (unused in tiered based cycles)
    price: int = Field(alias='price')

    # Anniversary = 1, FixedDayEachMonth = 2, FixedDayOfTheWeek = 3
    billing_date_type: int = Field(alias='billingDateType')

    # The type of visibility of each product; public, hidden and on-sale. Available values: 0, 1, 2, 3 (Public=0, Hidden=1, Internal=2, OffSale=3)
    visibility: int = Field(alias='visibility')

    # A number with the amount of free trial (for example: 5 for five of frequencyType of free trial)
    free_trial: typing.Optional[int] = Field(None, alias='freeTrial')

    # Daily = 1, Weekly = 2, Monthly = 3, Yearly = 4
    free_trial_frequency_type: typing.Optional[int] = Field(None, alias='freeTrialFrequencyType')

    # A number with the amount of minimum contract term (for example: 5 for five of frequencyType of minimum term)
    contract_term: typing.Optional[int] = Field(None, alias='contractTerm')

    # Daily = 1, Weekly = 2, Monthly = 3, Yearly = 4
    contract_term_frequency_type: typing.Optional[int] = Field(None, alias='contractTermFrequencyType')

    # The price amount of setup fee (charged only on first invoice of new subscriptions)
    setup_fee_price: typing.Optional[int] = Field(None, alias='setupFeePrice')

    # The amount of free units in tiered based cycles
    free_quantity: typing.Optional[int] = Field(None, alias='freeQuantity')

    # The fixed billing date if there is one (from 1 to 28)
    fixed_billing_date_day: typing.Optional[int] = Field(None, alias='fixedBillingDateDay')

    # The fixed billing month if there is one (from 1 to 12)
    fixed_billing_date_month: typing.Optional[int] = Field(None, alias='fixedBillingDateMonth')

    # DoNotProRate = 1, DoNotChargeUntilNextCycle = 2, ProRateBasedOnDaysRemaining = 3
    pro_rate_option: typing.Optional[int] = Field(None, alias='proRateOption')

    tiers: typing.Optional[ProductCreateCycleRequestCyclesInputModelItemTiers] = Field(None, alias='tiers')

    model_config = ConfigDict(
        protected_namespaces=(),
        arbitrary_types_allowed=True
    )
