# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class CustomerGetDetailsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            companyCurrency = schemas.StrSchema
            totalAmountPaid = schemas.StrSchema
            averageAmountPerMonth = schemas.StrSchema
            cardStatus = schemas.StrSchema
            customerUniqueId = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
        
            @staticmethod
            def billingAddress() -> typing.Type['CustomerGetDetailsResponseBillingAddress']:
                return CustomerGetDetailsResponseBillingAddress
            email = schemas.StrSchema
            additionalEmail = schemas.StrSchema
            phoneNumberDialCountry = schemas.StrSchema
            phoneNumberDialCode = schemas.StrSchema
            phoneNumber = schemas.StrSchema
            isMarketingConsentGiven = schemas.BoolSchema
            createdOn = schemas.StrSchema
            status = schemas.StrSchema
            __annotations__ = {
                "companyCurrency": companyCurrency,
                "totalAmountPaid": totalAmountPaid,
                "averageAmountPerMonth": averageAmountPerMonth,
                "cardStatus": cardStatus,
                "customerUniqueId": customerUniqueId,
                "firstName": firstName,
                "lastName": lastName,
                "billingAddress": billingAddress,
                "email": email,
                "additionalEmail": additionalEmail,
                "phoneNumberDialCountry": phoneNumberDialCountry,
                "phoneNumberDialCode": phoneNumberDialCode,
                "phoneNumber": phoneNumber,
                "isMarketingConsentGiven": isMarketingConsentGiven,
                "createdOn": createdOn,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["companyCurrency"]) -> MetaOapg.properties.companyCurrency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["totalAmountPaid"]) -> MetaOapg.properties.totalAmountPaid: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["averageAmountPerMonth"]) -> MetaOapg.properties.averageAmountPerMonth: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardStatus"]) -> MetaOapg.properties.cardStatus: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerUniqueId"]) -> MetaOapg.properties.customerUniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingAddress"]) -> 'CustomerGetDetailsResponseBillingAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalEmail"]) -> MetaOapg.properties.additionalEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumberDialCountry"]) -> MetaOapg.properties.phoneNumberDialCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumberDialCode"]) -> MetaOapg.properties.phoneNumberDialCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isMarketingConsentGiven"]) -> MetaOapg.properties.isMarketingConsentGiven: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdOn"]) -> MetaOapg.properties.createdOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["companyCurrency", "totalAmountPaid", "averageAmountPerMonth", "cardStatus", "customerUniqueId", "firstName", "lastName", "billingAddress", "email", "additionalEmail", "phoneNumberDialCountry", "phoneNumberDialCode", "phoneNumber", "isMarketingConsentGiven", "createdOn", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["companyCurrency"]) -> typing.Union[MetaOapg.properties.companyCurrency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["totalAmountPaid"]) -> typing.Union[MetaOapg.properties.totalAmountPaid, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["averageAmountPerMonth"]) -> typing.Union[MetaOapg.properties.averageAmountPerMonth, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardStatus"]) -> typing.Union[MetaOapg.properties.cardStatus, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerUniqueId"]) -> typing.Union[MetaOapg.properties.customerUniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> typing.Union[MetaOapg.properties.firstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> typing.Union[MetaOapg.properties.lastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingAddress"]) -> typing.Union['CustomerGetDetailsResponseBillingAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> typing.Union[MetaOapg.properties.email, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalEmail"]) -> typing.Union[MetaOapg.properties.additionalEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumberDialCountry"]) -> typing.Union[MetaOapg.properties.phoneNumberDialCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumberDialCode"]) -> typing.Union[MetaOapg.properties.phoneNumberDialCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isMarketingConsentGiven"]) -> typing.Union[MetaOapg.properties.isMarketingConsentGiven, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdOn"]) -> typing.Union[MetaOapg.properties.createdOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["companyCurrency", "totalAmountPaid", "averageAmountPerMonth", "cardStatus", "customerUniqueId", "firstName", "lastName", "billingAddress", "email", "additionalEmail", "phoneNumberDialCountry", "phoneNumberDialCode", "phoneNumber", "isMarketingConsentGiven", "createdOn", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        companyCurrency: typing.Union[MetaOapg.properties.companyCurrency, str, schemas.Unset] = schemas.unset,
        totalAmountPaid: typing.Union[MetaOapg.properties.totalAmountPaid, str, schemas.Unset] = schemas.unset,
        averageAmountPerMonth: typing.Union[MetaOapg.properties.averageAmountPerMonth, str, schemas.Unset] = schemas.unset,
        cardStatus: typing.Union[MetaOapg.properties.cardStatus, str, schemas.Unset] = schemas.unset,
        customerUniqueId: typing.Union[MetaOapg.properties.customerUniqueId, str, schemas.Unset] = schemas.unset,
        firstName: typing.Union[MetaOapg.properties.firstName, str, schemas.Unset] = schemas.unset,
        lastName: typing.Union[MetaOapg.properties.lastName, str, schemas.Unset] = schemas.unset,
        billingAddress: typing.Union['CustomerGetDetailsResponseBillingAddress', schemas.Unset] = schemas.unset,
        email: typing.Union[MetaOapg.properties.email, str, schemas.Unset] = schemas.unset,
        additionalEmail: typing.Union[MetaOapg.properties.additionalEmail, str, schemas.Unset] = schemas.unset,
        phoneNumberDialCountry: typing.Union[MetaOapg.properties.phoneNumberDialCountry, str, schemas.Unset] = schemas.unset,
        phoneNumberDialCode: typing.Union[MetaOapg.properties.phoneNumberDialCode, str, schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, str, schemas.Unset] = schemas.unset,
        isMarketingConsentGiven: typing.Union[MetaOapg.properties.isMarketingConsentGiven, bool, schemas.Unset] = schemas.unset,
        createdOn: typing.Union[MetaOapg.properties.createdOn, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerGetDetailsResponse':
        return super().__new__(
            cls,
            *args,
            companyCurrency=companyCurrency,
            totalAmountPaid=totalAmountPaid,
            averageAmountPerMonth=averageAmountPerMonth,
            cardStatus=cardStatus,
            customerUniqueId=customerUniqueId,
            firstName=firstName,
            lastName=lastName,
            billingAddress=billingAddress,
            email=email,
            additionalEmail=additionalEmail,
            phoneNumberDialCountry=phoneNumberDialCountry,
            phoneNumberDialCode=phoneNumberDialCode,
            phoneNumber=phoneNumber,
            isMarketingConsentGiven=isMarketingConsentGiven,
            createdOn=createdOn,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )

from billsby_python_sdk.model.customer_get_details_response_billing_address import CustomerGetDetailsResponseBillingAddress
