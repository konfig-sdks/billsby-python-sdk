# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class AllowanceGetDetailsResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            allowanceId = schemas.IntSchema
            name = schemas.StrSchema
            displayName = schemas.StrSchema
            singleUnitName = schemas.StrSchema
            pluralUnitName = schemas.StrSchema
            pricingModelType = schemas.StrSchema
        
            @staticmethod
            def counter() -> typing.Type['AllowanceGetDetailsResponseCounter']:
                return AllowanceGetDetailsResponseCounter
            hasActiveLinkedPlans = schemas.BoolSchema
        
            @staticmethod
            def featureTags() -> typing.Type['AllowanceGetDetailsResponseFeatureTags']:
                return AllowanceGetDetailsResponseFeatureTags
        
            @staticmethod
            def plans() -> typing.Type['AllowanceGetDetailsResponsePlans']:
                return AllowanceGetDetailsResponsePlans
        
            @staticmethod
            def priceModels() -> typing.Type['AllowanceGetDetailsResponsePriceModels']:
                return AllowanceGetDetailsResponsePriceModels
            __annotations__ = {
                "description": description,
                "allowanceId": allowanceId,
                "name": name,
                "displayName": displayName,
                "singleUnitName": singleUnitName,
                "pluralUnitName": pluralUnitName,
                "pricingModelType": pricingModelType,
                "counter": counter,
                "hasActiveLinkedPlans": hasActiveLinkedPlans,
                "featureTags": featureTags,
                "plans": plans,
                "priceModels": priceModels,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowanceId"]) -> MetaOapg.properties.allowanceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["singleUnitName"]) -> MetaOapg.properties.singleUnitName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pluralUnitName"]) -> MetaOapg.properties.pluralUnitName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricingModelType"]) -> MetaOapg.properties.pricingModelType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["counter"]) -> 'AllowanceGetDetailsResponseCounter': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasActiveLinkedPlans"]) -> MetaOapg.properties.hasActiveLinkedPlans: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureTags"]) -> 'AllowanceGetDetailsResponseFeatureTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["plans"]) -> 'AllowanceGetDetailsResponsePlans': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["priceModels"]) -> 'AllowanceGetDetailsResponsePriceModels': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "allowanceId", "name", "displayName", "singleUnitName", "pluralUnitName", "pricingModelType", "counter", "hasActiveLinkedPlans", "featureTags", "plans", "priceModels", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowanceId"]) -> typing.Union[MetaOapg.properties.allowanceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["singleUnitName"]) -> typing.Union[MetaOapg.properties.singleUnitName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pluralUnitName"]) -> typing.Union[MetaOapg.properties.pluralUnitName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricingModelType"]) -> typing.Union[MetaOapg.properties.pricingModelType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["counter"]) -> typing.Union['AllowanceGetDetailsResponseCounter', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasActiveLinkedPlans"]) -> typing.Union[MetaOapg.properties.hasActiveLinkedPlans, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureTags"]) -> typing.Union['AllowanceGetDetailsResponseFeatureTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["plans"]) -> typing.Union['AllowanceGetDetailsResponsePlans', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["priceModels"]) -> typing.Union['AllowanceGetDetailsResponsePriceModels', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "allowanceId", "name", "displayName", "singleUnitName", "pluralUnitName", "pricingModelType", "counter", "hasActiveLinkedPlans", "featureTags", "plans", "priceModels", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        allowanceId: typing.Union[MetaOapg.properties.allowanceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        singleUnitName: typing.Union[MetaOapg.properties.singleUnitName, str, schemas.Unset] = schemas.unset,
        pluralUnitName: typing.Union[MetaOapg.properties.pluralUnitName, str, schemas.Unset] = schemas.unset,
        pricingModelType: typing.Union[MetaOapg.properties.pricingModelType, str, schemas.Unset] = schemas.unset,
        counter: typing.Union['AllowanceGetDetailsResponseCounter', schemas.Unset] = schemas.unset,
        hasActiveLinkedPlans: typing.Union[MetaOapg.properties.hasActiveLinkedPlans, bool, schemas.Unset] = schemas.unset,
        featureTags: typing.Union['AllowanceGetDetailsResponseFeatureTags', schemas.Unset] = schemas.unset,
        plans: typing.Union['AllowanceGetDetailsResponsePlans', schemas.Unset] = schemas.unset,
        priceModels: typing.Union['AllowanceGetDetailsResponsePriceModels', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AllowanceGetDetailsResponse':
        return super().__new__(
            cls,
            *args,
            description=description,
            allowanceId=allowanceId,
            name=name,
            displayName=displayName,
            singleUnitName=singleUnitName,
            pluralUnitName=pluralUnitName,
            pricingModelType=pricingModelType,
            counter=counter,
            hasActiveLinkedPlans=hasActiveLinkedPlans,
            featureTags=featureTags,
            plans=plans,
            priceModels=priceModels,
            _configuration=_configuration,
            **kwargs,
        )

from billsby_python_sdk.model.allowance_get_details_response_counter import AllowanceGetDetailsResponseCounter
from billsby_python_sdk.model.allowance_get_details_response_feature_tags import AllowanceGetDetailsResponseFeatureTags
from billsby_python_sdk.model.allowance_get_details_response_plans import AllowanceGetDetailsResponsePlans
from billsby_python_sdk.model.allowance_get_details_response_price_models import AllowanceGetDetailsResponsePriceModels
