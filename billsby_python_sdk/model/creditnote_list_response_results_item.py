# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class CreditnoteListResponseResultsItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            creditNoteId = schemas.IntSchema
            creditNoteUniqueId = schemas.StrSchema
            customerId = schemas.IntSchema
            customerUniqueId = schemas.StrSchema
            customerFirstName = schemas.StrSchema
            customerLastName = schemas.StrSchema
            customerFullName = schemas.StrSchema
            createdOn = schemas.StrSchema
            amount = schemas.StrSchema
            status = schemas.StrSchema
            currency = schemas.StrSchema
            __annotations__ = {
                "creditNoteId": creditNoteId,
                "creditNoteUniqueId": creditNoteUniqueId,
                "customerId": customerId,
                "customerUniqueId": customerUniqueId,
                "customerFirstName": customerFirstName,
                "customerLastName": customerLastName,
                "customerFullName": customerFullName,
                "createdOn": createdOn,
                "amount": amount,
                "status": status,
                "currency": currency,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditNoteId"]) -> MetaOapg.properties.creditNoteId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["creditNoteUniqueId"]) -> MetaOapg.properties.creditNoteUniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerId"]) -> MetaOapg.properties.customerId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerUniqueId"]) -> MetaOapg.properties.customerUniqueId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerFirstName"]) -> MetaOapg.properties.customerFirstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerLastName"]) -> MetaOapg.properties.customerLastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customerFullName"]) -> MetaOapg.properties.customerFullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdOn"]) -> MetaOapg.properties.createdOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["creditNoteId", "creditNoteUniqueId", "customerId", "customerUniqueId", "customerFirstName", "customerLastName", "customerFullName", "createdOn", "amount", "status", "currency", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditNoteId"]) -> typing.Union[MetaOapg.properties.creditNoteId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["creditNoteUniqueId"]) -> typing.Union[MetaOapg.properties.creditNoteUniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerId"]) -> typing.Union[MetaOapg.properties.customerId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerUniqueId"]) -> typing.Union[MetaOapg.properties.customerUniqueId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerFirstName"]) -> typing.Union[MetaOapg.properties.customerFirstName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerLastName"]) -> typing.Union[MetaOapg.properties.customerLastName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customerFullName"]) -> typing.Union[MetaOapg.properties.customerFullName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdOn"]) -> typing.Union[MetaOapg.properties.createdOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["creditNoteId", "creditNoteUniqueId", "customerId", "customerUniqueId", "customerFirstName", "customerLastName", "customerFullName", "createdOn", "amount", "status", "currency", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        creditNoteId: typing.Union[MetaOapg.properties.creditNoteId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        creditNoteUniqueId: typing.Union[MetaOapg.properties.creditNoteUniqueId, str, schemas.Unset] = schemas.unset,
        customerId: typing.Union[MetaOapg.properties.customerId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        customerUniqueId: typing.Union[MetaOapg.properties.customerUniqueId, str, schemas.Unset] = schemas.unset,
        customerFirstName: typing.Union[MetaOapg.properties.customerFirstName, str, schemas.Unset] = schemas.unset,
        customerLastName: typing.Union[MetaOapg.properties.customerLastName, str, schemas.Unset] = schemas.unset,
        customerFullName: typing.Union[MetaOapg.properties.customerFullName, str, schemas.Unset] = schemas.unset,
        createdOn: typing.Union[MetaOapg.properties.createdOn, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, str, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CreditnoteListResponseResultsItem':
        return super().__new__(
            cls,
            *args,
            creditNoteId=creditNoteId,
            creditNoteUniqueId=creditNoteUniqueId,
            customerId=customerId,
            customerUniqueId=customerUniqueId,
            customerFirstName=customerFirstName,
            customerLastName=customerLastName,
            customerFullName=customerFullName,
            createdOn=createdOn,
            amount=amount,
            status=status,
            currency=currency,
            _configuration=_configuration,
            **kwargs,
        )
