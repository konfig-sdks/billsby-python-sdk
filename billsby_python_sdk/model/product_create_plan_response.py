# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class ProductCreatePlanResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            description = schemas.StrSchema
            planId = schemas.IntSchema
            name = schemas.StrSchema
            displayName = schemas.StrSchema
            pricingModelType = schemas.IntSchema
            productId = schemas.IntSchema
        
            @staticmethod
            def cycles() -> typing.Type['ProductCreatePlanResponseCycles']:
                return ProductCreatePlanResponseCycles
        
            @staticmethod
            def featureTags() -> typing.Type['ProductCreatePlanResponseFeatureTags']:
                return ProductCreatePlanResponseFeatureTags
            visibility = schemas.StrSchema
            redirectUrl = schemas.StrSchema
            hasActiveSubscription = schemas.BoolSchema
            alertEmail = schemas.StrSchema
            __annotations__ = {
                "description": description,
                "planId": planId,
                "name": name,
                "displayName": displayName,
                "pricingModelType": pricingModelType,
                "productId": productId,
                "cycles": cycles,
                "featureTags": featureTags,
                "visibility": visibility,
                "redirectUrl": redirectUrl,
                "hasActiveSubscription": hasActiveSubscription,
                "alertEmail": alertEmail,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["description"]) -> MetaOapg.properties.description: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planId"]) -> MetaOapg.properties.planId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["displayName"]) -> MetaOapg.properties.displayName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricingModelType"]) -> MetaOapg.properties.pricingModelType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["productId"]) -> MetaOapg.properties.productId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycles"]) -> 'ProductCreatePlanResponseCycles': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["featureTags"]) -> 'ProductCreatePlanResponseFeatureTags': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["visibility"]) -> MetaOapg.properties.visibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["redirectUrl"]) -> MetaOapg.properties.redirectUrl: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["hasActiveSubscription"]) -> MetaOapg.properties.hasActiveSubscription: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["alertEmail"]) -> MetaOapg.properties.alertEmail: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["description", "planId", "name", "displayName", "pricingModelType", "productId", "cycles", "featureTags", "visibility", "redirectUrl", "hasActiveSubscription", "alertEmail", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["description"]) -> typing.Union[MetaOapg.properties.description, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planId"]) -> typing.Union[MetaOapg.properties.planId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["displayName"]) -> typing.Union[MetaOapg.properties.displayName, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricingModelType"]) -> typing.Union[MetaOapg.properties.pricingModelType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["productId"]) -> typing.Union[MetaOapg.properties.productId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycles"]) -> typing.Union['ProductCreatePlanResponseCycles', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["featureTags"]) -> typing.Union['ProductCreatePlanResponseFeatureTags', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["visibility"]) -> typing.Union[MetaOapg.properties.visibility, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["redirectUrl"]) -> typing.Union[MetaOapg.properties.redirectUrl, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["hasActiveSubscription"]) -> typing.Union[MetaOapg.properties.hasActiveSubscription, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["alertEmail"]) -> typing.Union[MetaOapg.properties.alertEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["description", "planId", "name", "displayName", "pricingModelType", "productId", "cycles", "featureTags", "visibility", "redirectUrl", "hasActiveSubscription", "alertEmail", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        description: typing.Union[MetaOapg.properties.description, str, schemas.Unset] = schemas.unset,
        planId: typing.Union[MetaOapg.properties.planId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        displayName: typing.Union[MetaOapg.properties.displayName, str, schemas.Unset] = schemas.unset,
        pricingModelType: typing.Union[MetaOapg.properties.pricingModelType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        productId: typing.Union[MetaOapg.properties.productId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        cycles: typing.Union['ProductCreatePlanResponseCycles', schemas.Unset] = schemas.unset,
        featureTags: typing.Union['ProductCreatePlanResponseFeatureTags', schemas.Unset] = schemas.unset,
        visibility: typing.Union[MetaOapg.properties.visibility, str, schemas.Unset] = schemas.unset,
        redirectUrl: typing.Union[MetaOapg.properties.redirectUrl, str, schemas.Unset] = schemas.unset,
        hasActiveSubscription: typing.Union[MetaOapg.properties.hasActiveSubscription, bool, schemas.Unset] = schemas.unset,
        alertEmail: typing.Union[MetaOapg.properties.alertEmail, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductCreatePlanResponse':
        return super().__new__(
            cls,
            *args,
            description=description,
            planId=planId,
            name=name,
            displayName=displayName,
            pricingModelType=pricingModelType,
            productId=productId,
            cycles=cycles,
            featureTags=featureTags,
            visibility=visibility,
            redirectUrl=redirectUrl,
            hasActiveSubscription=hasActiveSubscription,
            alertEmail=alertEmail,
            _configuration=_configuration,
            **kwargs,
        )

from billsby_python_sdk.model.product_create_plan_response_cycles import ProductCreatePlanResponseCycles
from billsby_python_sdk.model.product_create_plan_response_feature_tags import ProductCreatePlanResponseFeatureTags
