# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class ProductCreateCycleResponseItemPricingModel(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            pricingModelId = schemas.IntSchema
            frequency = schemas.IntSchema
            frequencyType = schemas.IntSchema
            freeTrial = schemas.IntSchema
            freeTrialFrequencyType = schemas.IntSchema
            contractTerm = schemas.IntSchema
            contractTermFrequencyType = schemas.IntSchema
            setupFeePrice = schemas.IntSchema
            setupFeePriceFormatted = schemas.StrSchema
            freeQuantity = schemas.IntSchema
            billingDateType = schemas.IntSchema
            fixedBillingDateDay = schemas.IntSchema
            proRateOption = schemas.IntSchema
            __annotations__ = {
                "pricingModelId": pricingModelId,
                "frequency": frequency,
                "frequencyType": frequencyType,
                "freeTrial": freeTrial,
                "freeTrialFrequencyType": freeTrialFrequencyType,
                "contractTerm": contractTerm,
                "contractTermFrequencyType": contractTermFrequencyType,
                "setupFeePrice": setupFeePrice,
                "setupFeePriceFormatted": setupFeePriceFormatted,
                "freeQuantity": freeQuantity,
                "billingDateType": billingDateType,
                "fixedBillingDateDay": fixedBillingDateDay,
                "proRateOption": proRateOption,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pricingModelId"]) -> MetaOapg.properties.pricingModelId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequency"]) -> MetaOapg.properties.frequency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["frequencyType"]) -> MetaOapg.properties.frequencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeTrial"]) -> MetaOapg.properties.freeTrial: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeTrialFrequencyType"]) -> MetaOapg.properties.freeTrialFrequencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractTerm"]) -> MetaOapg.properties.contractTerm: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["contractTermFrequencyType"]) -> MetaOapg.properties.contractTermFrequencyType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setupFeePrice"]) -> MetaOapg.properties.setupFeePrice: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["setupFeePriceFormatted"]) -> MetaOapg.properties.setupFeePriceFormatted: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["freeQuantity"]) -> MetaOapg.properties.freeQuantity: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["billingDateType"]) -> MetaOapg.properties.billingDateType: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fixedBillingDateDay"]) -> MetaOapg.properties.fixedBillingDateDay: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["proRateOption"]) -> MetaOapg.properties.proRateOption: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["pricingModelId", "frequency", "frequencyType", "freeTrial", "freeTrialFrequencyType", "contractTerm", "contractTermFrequencyType", "setupFeePrice", "setupFeePriceFormatted", "freeQuantity", "billingDateType", "fixedBillingDateDay", "proRateOption", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pricingModelId"]) -> typing.Union[MetaOapg.properties.pricingModelId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequency"]) -> typing.Union[MetaOapg.properties.frequency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["frequencyType"]) -> typing.Union[MetaOapg.properties.frequencyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeTrial"]) -> typing.Union[MetaOapg.properties.freeTrial, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeTrialFrequencyType"]) -> typing.Union[MetaOapg.properties.freeTrialFrequencyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractTerm"]) -> typing.Union[MetaOapg.properties.contractTerm, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["contractTermFrequencyType"]) -> typing.Union[MetaOapg.properties.contractTermFrequencyType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setupFeePrice"]) -> typing.Union[MetaOapg.properties.setupFeePrice, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["setupFeePriceFormatted"]) -> typing.Union[MetaOapg.properties.setupFeePriceFormatted, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["freeQuantity"]) -> typing.Union[MetaOapg.properties.freeQuantity, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["billingDateType"]) -> typing.Union[MetaOapg.properties.billingDateType, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fixedBillingDateDay"]) -> typing.Union[MetaOapg.properties.fixedBillingDateDay, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["proRateOption"]) -> typing.Union[MetaOapg.properties.proRateOption, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["pricingModelId", "frequency", "frequencyType", "freeTrial", "freeTrialFrequencyType", "contractTerm", "contractTermFrequencyType", "setupFeePrice", "setupFeePriceFormatted", "freeQuantity", "billingDateType", "fixedBillingDateDay", "proRateOption", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        pricingModelId: typing.Union[MetaOapg.properties.pricingModelId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        frequency: typing.Union[MetaOapg.properties.frequency, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        frequencyType: typing.Union[MetaOapg.properties.frequencyType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        freeTrial: typing.Union[MetaOapg.properties.freeTrial, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        freeTrialFrequencyType: typing.Union[MetaOapg.properties.freeTrialFrequencyType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contractTerm: typing.Union[MetaOapg.properties.contractTerm, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        contractTermFrequencyType: typing.Union[MetaOapg.properties.contractTermFrequencyType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        setupFeePrice: typing.Union[MetaOapg.properties.setupFeePrice, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        setupFeePriceFormatted: typing.Union[MetaOapg.properties.setupFeePriceFormatted, str, schemas.Unset] = schemas.unset,
        freeQuantity: typing.Union[MetaOapg.properties.freeQuantity, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        billingDateType: typing.Union[MetaOapg.properties.billingDateType, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        fixedBillingDateDay: typing.Union[MetaOapg.properties.fixedBillingDateDay, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        proRateOption: typing.Union[MetaOapg.properties.proRateOption, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ProductCreateCycleResponseItemPricingModel':
        return super().__new__(
            cls,
            *args,
            pricingModelId=pricingModelId,
            frequency=frequency,
            frequencyType=frequencyType,
            freeTrial=freeTrial,
            freeTrialFrequencyType=freeTrialFrequencyType,
            contractTerm=contractTerm,
            contractTermFrequencyType=contractTermFrequencyType,
            setupFeePrice=setupFeePrice,
            setupFeePriceFormatted=setupFeePriceFormatted,
            freeQuantity=freeQuantity,
            billingDateType=billingDateType,
            fixedBillingDateDay=fixedBillingDateDay,
            proRateOption=proRateOption,
            _configuration=_configuration,
            **kwargs,
        )
