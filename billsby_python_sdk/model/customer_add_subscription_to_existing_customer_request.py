# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class CustomerAddSubscriptionToExistingCustomerRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "cycleId",
        }
        
        class properties:
            cycleId = schemas.Int32Schema
            units = schemas.Int32Schema
        
            @staticmethod
            def address() -> typing.Type['CustomerAddSubscriptionToExistingCustomerRequestAddress']:
                return CustomerAddSubscriptionToExistingCustomerRequestAddress
            shippingAddress = schemas.DictSchema
            additionalEmail = schemas.StrSchema
            phoneNumberDialCountry = schemas.StrSchema
            phoneNumberDialCode = schemas.Int32Schema
            phoneNumber = schemas.Int32Schema
            marketingConsent = schemas.BoolSchema
            taxRegNumber = schemas.StrSchema
            ipAddress = schemas.StrSchema
        
            @staticmethod
            def customFieldResponse() -> typing.Type['CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponse']:
                return CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponse
        
            @staticmethod
            def addOns() -> typing.Type['CustomerAddSubscriptionToExistingCustomerRequestAddOns']:
                return CustomerAddSubscriptionToExistingCustomerRequestAddOns
            allowances = schemas.Int32Schema
        
            @staticmethod
            def couponCodes() -> typing.Type['CustomerAddSubscriptionToExistingCustomerRequestCouponCodes']:
                return CustomerAddSubscriptionToExistingCustomerRequestCouponCodes
            __annotations__ = {
                "cycleId": cycleId,
                "units": units,
                "address": address,
                "shippingAddress": shippingAddress,
                "additionalEmail": additionalEmail,
                "phoneNumberDialCountry": phoneNumberDialCountry,
                "phoneNumberDialCode": phoneNumberDialCode,
                "phoneNumber": phoneNumber,
                "marketingConsent": marketingConsent,
                "taxRegNumber": taxRegNumber,
                "ipAddress": ipAddress,
                "customFieldResponse": customFieldResponse,
                "addOns": addOns,
                "allowances": allowances,
                "couponCodes": couponCodes,
            }
    
    cycleId: MetaOapg.properties.cycleId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cycleId"]) -> MetaOapg.properties.cycleId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["units"]) -> MetaOapg.properties.units: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["address"]) -> 'CustomerAddSubscriptionToExistingCustomerRequestAddress': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shippingAddress"]) -> MetaOapg.properties.shippingAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["additionalEmail"]) -> MetaOapg.properties.additionalEmail: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumberDialCountry"]) -> MetaOapg.properties.phoneNumberDialCountry: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumberDialCode"]) -> MetaOapg.properties.phoneNumberDialCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["phoneNumber"]) -> MetaOapg.properties.phoneNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["marketingConsent"]) -> MetaOapg.properties.marketingConsent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["taxRegNumber"]) -> MetaOapg.properties.taxRegNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ipAddress"]) -> MetaOapg.properties.ipAddress: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["customFieldResponse"]) -> 'CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponse': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addOns"]) -> 'CustomerAddSubscriptionToExistingCustomerRequestAddOns': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["allowances"]) -> MetaOapg.properties.allowances: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["couponCodes"]) -> 'CustomerAddSubscriptionToExistingCustomerRequestCouponCodes': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["cycleId", "units", "address", "shippingAddress", "additionalEmail", "phoneNumberDialCountry", "phoneNumberDialCode", "phoneNumber", "marketingConsent", "taxRegNumber", "ipAddress", "customFieldResponse", "addOns", "allowances", "couponCodes", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cycleId"]) -> MetaOapg.properties.cycleId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["units"]) -> typing.Union[MetaOapg.properties.units, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["address"]) -> typing.Union['CustomerAddSubscriptionToExistingCustomerRequestAddress', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shippingAddress"]) -> typing.Union[MetaOapg.properties.shippingAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["additionalEmail"]) -> typing.Union[MetaOapg.properties.additionalEmail, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumberDialCountry"]) -> typing.Union[MetaOapg.properties.phoneNumberDialCountry, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumberDialCode"]) -> typing.Union[MetaOapg.properties.phoneNumberDialCode, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["phoneNumber"]) -> typing.Union[MetaOapg.properties.phoneNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["marketingConsent"]) -> typing.Union[MetaOapg.properties.marketingConsent, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["taxRegNumber"]) -> typing.Union[MetaOapg.properties.taxRegNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ipAddress"]) -> typing.Union[MetaOapg.properties.ipAddress, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["customFieldResponse"]) -> typing.Union['CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponse', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addOns"]) -> typing.Union['CustomerAddSubscriptionToExistingCustomerRequestAddOns', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["allowances"]) -> typing.Union[MetaOapg.properties.allowances, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["couponCodes"]) -> typing.Union['CustomerAddSubscriptionToExistingCustomerRequestCouponCodes', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["cycleId", "units", "address", "shippingAddress", "additionalEmail", "phoneNumberDialCountry", "phoneNumberDialCode", "phoneNumber", "marketingConsent", "taxRegNumber", "ipAddress", "customFieldResponse", "addOns", "allowances", "couponCodes", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        cycleId: typing.Union[MetaOapg.properties.cycleId, decimal.Decimal, int, ],
        units: typing.Union[MetaOapg.properties.units, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        address: typing.Union['CustomerAddSubscriptionToExistingCustomerRequestAddress', schemas.Unset] = schemas.unset,
        shippingAddress: typing.Union[MetaOapg.properties.shippingAddress, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        additionalEmail: typing.Union[MetaOapg.properties.additionalEmail, str, schemas.Unset] = schemas.unset,
        phoneNumberDialCountry: typing.Union[MetaOapg.properties.phoneNumberDialCountry, str, schemas.Unset] = schemas.unset,
        phoneNumberDialCode: typing.Union[MetaOapg.properties.phoneNumberDialCode, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        phoneNumber: typing.Union[MetaOapg.properties.phoneNumber, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        marketingConsent: typing.Union[MetaOapg.properties.marketingConsent, bool, schemas.Unset] = schemas.unset,
        taxRegNumber: typing.Union[MetaOapg.properties.taxRegNumber, str, schemas.Unset] = schemas.unset,
        ipAddress: typing.Union[MetaOapg.properties.ipAddress, str, schemas.Unset] = schemas.unset,
        customFieldResponse: typing.Union['CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponse', schemas.Unset] = schemas.unset,
        addOns: typing.Union['CustomerAddSubscriptionToExistingCustomerRequestAddOns', schemas.Unset] = schemas.unset,
        allowances: typing.Union[MetaOapg.properties.allowances, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        couponCodes: typing.Union['CustomerAddSubscriptionToExistingCustomerRequestCouponCodes', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerAddSubscriptionToExistingCustomerRequest':
        return super().__new__(
            cls,
            *args,
            cycleId=cycleId,
            units=units,
            address=address,
            shippingAddress=shippingAddress,
            additionalEmail=additionalEmail,
            phoneNumberDialCountry=phoneNumberDialCountry,
            phoneNumberDialCode=phoneNumberDialCode,
            phoneNumber=phoneNumber,
            marketingConsent=marketingConsent,
            taxRegNumber=taxRegNumber,
            ipAddress=ipAddress,
            customFieldResponse=customFieldResponse,
            addOns=addOns,
            allowances=allowances,
            couponCodes=couponCodes,
            _configuration=_configuration,
            **kwargs,
        )

from billsby_python_sdk.model.customer_add_subscription_to_existing_customer_request_add_ons import CustomerAddSubscriptionToExistingCustomerRequestAddOns
from billsby_python_sdk.model.customer_add_subscription_to_existing_customer_request_address import CustomerAddSubscriptionToExistingCustomerRequestAddress
from billsby_python_sdk.model.customer_add_subscription_to_existing_customer_request_coupon_codes import CustomerAddSubscriptionToExistingCustomerRequestCouponCodes
from billsby_python_sdk.model.customer_add_subscription_to_existing_customer_request_custom_field_response import CustomerAddSubscriptionToExistingCustomerRequestCustomFieldResponse
