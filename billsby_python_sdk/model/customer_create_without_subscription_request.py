# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class CustomerCreateWithoutSubscriptionRequest(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "country",
            "firstName",
            "lastName",
            "city",
            "addressLine1",
            "postCode",
            "state",
            "email",
        }
        
        class properties:
            addressLine1 = schemas.StrSchema
            city = schemas.StrSchema
            state = schemas.StrSchema
            country = schemas.StrSchema
            postCode = schemas.StrSchema
            firstName = schemas.StrSchema
            lastName = schemas.StrSchema
            email = schemas.StrSchema
            addressLine2 = schemas.StrSchema
        
            @staticmethod
            def cardDetails() -> typing.Type['CustomerCreateWithoutSubscriptionRequestCardDetails']:
                return CustomerCreateWithoutSubscriptionRequestCardDetails
            __annotations__ = {
                "addressLine1": addressLine1,
                "city": city,
                "state": state,
                "country": country,
                "postCode": postCode,
                "firstName": firstName,
                "lastName": lastName,
                "email": email,
                "addressLine2": addressLine2,
                "cardDetails": cardDetails,
            }
    
    country: MetaOapg.properties.country
    firstName: MetaOapg.properties.firstName
    lastName: MetaOapg.properties.lastName
    city: MetaOapg.properties.city
    addressLine1: MetaOapg.properties.addressLine1
    postCode: MetaOapg.properties.postCode
    state: MetaOapg.properties.state
    email: MetaOapg.properties.email
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["postCode"]) -> MetaOapg.properties.postCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["addressLine2"]) -> MetaOapg.properties.addressLine2: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cardDetails"]) -> 'CustomerCreateWithoutSubscriptionRequestCardDetails': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["addressLine1", "city", "state", "country", "postCode", "firstName", "lastName", "email", "addressLine2", "cardDetails", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine1"]) -> MetaOapg.properties.addressLine1: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["city"]) -> MetaOapg.properties.city: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["state"]) -> MetaOapg.properties.state: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["country"]) -> MetaOapg.properties.country: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["postCode"]) -> MetaOapg.properties.postCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["firstName"]) -> MetaOapg.properties.firstName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lastName"]) -> MetaOapg.properties.lastName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["email"]) -> MetaOapg.properties.email: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["addressLine2"]) -> typing.Union[MetaOapg.properties.addressLine2, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cardDetails"]) -> typing.Union['CustomerCreateWithoutSubscriptionRequestCardDetails', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["addressLine1", "city", "state", "country", "postCode", "firstName", "lastName", "email", "addressLine2", "cardDetails", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        country: typing.Union[MetaOapg.properties.country, str, ],
        firstName: typing.Union[MetaOapg.properties.firstName, str, ],
        lastName: typing.Union[MetaOapg.properties.lastName, str, ],
        city: typing.Union[MetaOapg.properties.city, str, ],
        addressLine1: typing.Union[MetaOapg.properties.addressLine1, str, ],
        postCode: typing.Union[MetaOapg.properties.postCode, str, ],
        state: typing.Union[MetaOapg.properties.state, str, ],
        email: typing.Union[MetaOapg.properties.email, str, ],
        addressLine2: typing.Union[MetaOapg.properties.addressLine2, str, schemas.Unset] = schemas.unset,
        cardDetails: typing.Union['CustomerCreateWithoutSubscriptionRequestCardDetails', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CustomerCreateWithoutSubscriptionRequest':
        return super().__new__(
            cls,
            *args,
            country=country,
            firstName=firstName,
            lastName=lastName,
            city=city,
            addressLine1=addressLine1,
            postCode=postCode,
            state=state,
            email=email,
            addressLine2=addressLine2,
            cardDetails=cardDetails,
            _configuration=_configuration,
            **kwargs,
        )

from billsby_python_sdk.model.customer_create_without_subscription_request_card_details import CustomerCreateWithoutSubscriptionRequestCardDetails
