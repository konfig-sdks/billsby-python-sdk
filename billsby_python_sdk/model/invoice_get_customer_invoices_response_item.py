# coding: utf-8

"""
    Billsby API

    Billsby is a feature-rich \"Saas\" recurring payment platform, ranked as the leading subscription billing software by G2.  Billsby is designed to ensure customers can go live quickly, often within 1-2 hours.  To help facilitate this process we have a team of friendly knowledgeable advisors ready to help your business go live.      Billsby specializes in providing great customer service at an affordable price point - our technology is rated No 1 on G2 by our customers.  If you are a developer creating a solution for your customer, Billsby has a friendly well-documented API.  The Billsby team are here to provide support to developers in order to ensure a smooth migration or new system build.   Why not book a call, talk through your Billing requirements and we can let you know how we can help you transform your business..

    The version of the OpenAPI document: 1.3.5
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from billsby_python_sdk import schemas  # noqa: F401


class InvoiceGetCustomerInvoicesResponseItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        class properties:
            invoiceId = schemas.IntSchema
            createdOn = schemas.StrSchema
            invoiceNumber = schemas.StrSchema
            amount = schemas.IntSchema
            refundableAmount = schemas.IntSchema
            formattedAmount = schemas.StrSchema
            currency = schemas.StrSchema
            linkedTransactionsCount = schemas.IntSchema
            status = schemas.StrSchema
            __annotations__ = {
                "invoiceId": invoiceId,
                "createdOn": createdOn,
                "invoiceNumber": invoiceNumber,
                "amount": amount,
                "refundableAmount": refundableAmount,
                "formattedAmount": formattedAmount,
                "currency": currency,
                "linkedTransactionsCount": linkedTransactionsCount,
                "status": status,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceId"]) -> MetaOapg.properties.invoiceId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["createdOn"]) -> MetaOapg.properties.createdOn: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["invoiceNumber"]) -> MetaOapg.properties.invoiceNumber: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["amount"]) -> MetaOapg.properties.amount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["refundableAmount"]) -> MetaOapg.properties.refundableAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["formattedAmount"]) -> MetaOapg.properties.formattedAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["currency"]) -> MetaOapg.properties.currency: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["linkedTransactionsCount"]) -> MetaOapg.properties.linkedTransactionsCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["invoiceId", "createdOn", "invoiceNumber", "amount", "refundableAmount", "formattedAmount", "currency", "linkedTransactionsCount", "status", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceId"]) -> typing.Union[MetaOapg.properties.invoiceId, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["createdOn"]) -> typing.Union[MetaOapg.properties.createdOn, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["invoiceNumber"]) -> typing.Union[MetaOapg.properties.invoiceNumber, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["amount"]) -> typing.Union[MetaOapg.properties.amount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["refundableAmount"]) -> typing.Union[MetaOapg.properties.refundableAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["formattedAmount"]) -> typing.Union[MetaOapg.properties.formattedAmount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["currency"]) -> typing.Union[MetaOapg.properties.currency, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["linkedTransactionsCount"]) -> typing.Union[MetaOapg.properties.linkedTransactionsCount, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> typing.Union[MetaOapg.properties.status, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["invoiceId", "createdOn", "invoiceNumber", "amount", "refundableAmount", "formattedAmount", "currency", "linkedTransactionsCount", "status", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        invoiceId: typing.Union[MetaOapg.properties.invoiceId, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        createdOn: typing.Union[MetaOapg.properties.createdOn, str, schemas.Unset] = schemas.unset,
        invoiceNumber: typing.Union[MetaOapg.properties.invoiceNumber, str, schemas.Unset] = schemas.unset,
        amount: typing.Union[MetaOapg.properties.amount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        refundableAmount: typing.Union[MetaOapg.properties.refundableAmount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        formattedAmount: typing.Union[MetaOapg.properties.formattedAmount, str, schemas.Unset] = schemas.unset,
        currency: typing.Union[MetaOapg.properties.currency, str, schemas.Unset] = schemas.unset,
        linkedTransactionsCount: typing.Union[MetaOapg.properties.linkedTransactionsCount, decimal.Decimal, int, schemas.Unset] = schemas.unset,
        status: typing.Union[MetaOapg.properties.status, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'InvoiceGetCustomerInvoicesResponseItem':
        return super().__new__(
            cls,
            *args,
            invoiceId=invoiceId,
            createdOn=createdOn,
            invoiceNumber=invoiceNumber,
            amount=amount,
            refundableAmount=refundableAmount,
            formattedAmount=formattedAmount,
            currency=currency,
            linkedTransactionsCount=linkedTransactionsCount,
            status=status,
            _configuration=_configuration,
            **kwargs,
        )
